{"version":3,"sources":["/source/vs.toolkit.min.js","vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","$inject","RunBlock","$log","debug","angular","module","config","run","constant","appearance","factory","$http","$q","_fetch","get","uri","then","res","data","error","console","log","_saveActions","actions","post","actionUri","docActions","root","fetch","saveActions","catalog","servers","_loadRemoteLocations","params","catalogs","promises","forEach","isDefined","url","locations","catalogPromise","withCredentials","response","push","all","loadRemoteLocations","displayConfig","_getListQueryString","queryString","configUri","Math","random","_getConfigQueryString","id","_getDisplayConfigList","_getDisplayConfig","_deleteDisplayConfig","_saveDisplayConfig","template","getDisplayConfigs","getDisplayConfig","deleteDisplayConfig","saveDisplayConfig","util","Sugar","this","isString","val","String","getInstance","prototype","toMap","key","array","map","value","toStringMap","pluck","name","fn","fl","isUndefined","postForm","service","method","headers","Content-Type","parseQueryString","s","pairs","slice","split","result","pair","decodeURIComponent","JSON","parse","stringify","postJson","request","api","action","fields","fields_1","FieldsResource","sugar","_this","getFieldsParams","ensureTagsFieldExist","docs","found","i","length","category","disp_en","displayable","filterable","sortable","stype","tableable","fetchHydrationStats","query","field","indexOf","getStatsParams","statsFields","facet_counts","facet_fields","total","numFound","applyHydration","join","statsField","count","getCount","hydration","refName","filters","filter","hayStack","oldNeedle","newNeedle","replace","RegExp","savedSearch","_doSave","_getQueryString","rows","_execute","jsonp","getSavedSearches","saveSearch","deleteSearch","wipe","restore","order","beforeId","afterId","fetchLabels","Date","getTime","resp","labels","translate","Translator","removePrefixHash","removePrefixList","item","c","substring","load","resourceUrl","when","translateField","idx","prefix","translated","FIELD","classify","str","txt","charAt","toUpperCase","substr","toLowerCase"],"mappings":"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","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var appearance;\n        (function (appearance) {\n            'use strict';\n            angular.module('vs.tools.appearance', []);\n        })(appearance = tools.appearance || (tools.appearance = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.appearance').\n    /* @ngInject */\n    factory('appearanceResource', function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/appearance';\n    var actionUri = config.root + 'api/rest/appearance/actions';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data;\n        }, function (error) {\n            console.log(error);\n            // @TODO: handle error\n            return error;\n        });\n    }\n    function _saveActions(actions) {\n        return $http.post(actionUri, { docActions: actions }).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        fetch: function () {\n            return _fetch();\n        },\n        saveActions: function (actions) {\n            return _saveActions(actions);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var catalog;\n        (function (catalog) {\n            'use strict';\n            angular.module('vs.tools.catalog', []);\n        })(catalog = tools.catalog || (tools.catalog = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.catalog').\n    /* @ngInject */\n    factory('catalogResource', function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/index/config/federation.json';\n    var locations = 'api/rest/i18n/field/location.json';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data.servers;\n        }, function (error) {\n            console.log(error);\n            return error;\n        });\n    }\n    function _loadRemoteLocations(params) {\n        return _fetch().then(function (catalogs) {\n            var promises = [];\n            catalogs.forEach(function (catalog) {\n                if (angular.isDefined(catalog.url)) {\n                    var url = catalog.url + locations;\n                    var catalogPromise = $http.get(url, { withCredentials: false }).then(function (response) {\n                        return response;\n                    });\n                    promises.push(catalogPromise);\n                }\n            });\n            return $q.all(promises).then(function (res) {\n                return res;\n            }, function (error) {\n                return error; // failure means the remote catalogs are offline, allow to continue, the search should show an error\n            });\n        });\n    }\n    return {\n        fetch: _fetch,\n        loadRemoteLocations: _loadRemoteLocations\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,stype,category,docs,disp_en,sortable,filterable,tableable,displayable,editable');\n                        return sugar.postForm('solr/fields/select?rand=' + Math.random(), _this.getFieldsParams(fl)).then(function (res) {\n                            _this.ensureTagsFieldExist(res.data.response.docs);\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.ensureTagsFieldExist = function (fields) {\n                        var found = false;\n                        for (var i = fields.length - 1; i >= 0; i--) {\n                            if (fields[i].name === 'tag_tags') {\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            fields.push({\n                                category: 'TEXT',\n                                disp_en: 'Tags',\n                                displayable: true,\n                                docs: 0,\n                                filterable: true,\n                                name: 'tag_tags',\n                                sortable: false,\n                                stype: 'string',\n                                tableable: false\n                            });\n                        }\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=100000&sort=name%20asc&wt=json&rand=' + Math.random();\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=100000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=') + '&rand=' + Math.random();\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(new RegExp(oldNeedle, 'g'), newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels,display_override';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    var _this = this;\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                    this.removePrefixHash = {};\n                    var removePrefixList = ['fs_', 'ft_', 'fh_', 'fi_', 'fl_', 'fd_', 'ff_', 'fu_', 'fp_', 'fy_', 'fm_', 'fb_', 'tag_', 'meta_', 'fss_', 'grp_'];\n                    removePrefixList.forEach(function (item) {\n                        _this.removePrefixHash[item] = true;\n                        var c = item.substring(1, 2);\n                        var key = item.replace('_', c + '_');\n                        _this.removePrefixHash[key] = true;\n                    });\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var idx = field.indexOf('_');\n                    if (idx > -1) {\n                        var prefix = field.substring(0, idx + 1);\n                        if (this.removePrefixHash[prefix]) {\n                            field = field.replace(prefix, '');\n                        }\n                    }\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); })\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,","var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            Config.$inject = [\"$logProvider\"];\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            RunBlock.$inject = [\"$log\"];\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var appearance;\n        (function (appearance) {\n            'use strict';\n            angular.module('vs.tools.appearance', []);\n        })(appearance = tools.appearance || (tools.appearance = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.appearance').\n    /* @ngInject */\n    factory('appearanceResource', [\"$http\", \"$q\", function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/appearance';\n    var actionUri = config.root + 'api/rest/appearance/actions';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data;\n        }, function (error) {\n            console.log(error);\n            // @TODO: handle error\n            return error;\n        });\n    }\n    function _saveActions(actions) {\n        return $http.post(actionUri, { docActions: actions }).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        fetch: function () {\n            return _fetch();\n        },\n        saveActions: function (actions) {\n            return _saveActions(actions);\n        }\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var catalog;\n        (function (catalog) {\n            'use strict';\n            angular.module('vs.tools.catalog', []);\n        })(catalog = tools.catalog || (tools.catalog = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.catalog').\n    /* @ngInject */\n    factory('catalogResource', [\"$http\", \"$q\", function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/index/config/federation.json';\n    var locations = 'api/rest/i18n/field/location.json';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data.servers;\n        }, function (error) {\n            console.log(error);\n            return error;\n        });\n    }\n    function _loadRemoteLocations(params) {\n        return _fetch().then(function (catalogs) {\n            var promises = [];\n            catalogs.forEach(function (catalog) {\n                if (angular.isDefined(catalog.url)) {\n                    var url = catalog.url + locations;\n                    var catalogPromise = $http.get(url, { withCredentials: false }).then(function (response) {\n                        return response;\n                    });\n                    promises.push(catalogPromise);\n                }\n            });\n            return $q.all(promises).then(function (res) {\n                return res;\n            }, function (error) {\n                return error; // failure means the remote catalogs are offline, allow to continue, the search should show an error\n            });\n        });\n    }\n    return {\n        fetch: _fetch,\n        loadRemoteLocations: _loadRemoteLocations\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', [\"$http\", function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                FieldsResource.$inject = [\"sugar\"];\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,stype,category,docs,disp_en,sortable,filterable,tableable,displayable,editable');\n                        return sugar.postForm('solr/fields/select?rand=' + Math.random(), _this.getFieldsParams(fl)).then(function (res) {\n                            _this.ensureTagsFieldExist(res.data.response.docs);\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.ensureTagsFieldExist = function (fields) {\n                        var found = false;\n                        for (var i = fields.length - 1; i >= 0; i--) {\n                            if (fields[i].name === 'tag_tags') {\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            fields.push({\n                                category: 'TEXT',\n                                disp_en: 'Tags',\n                                displayable: true,\n                                docs: 0,\n                                filterable: true,\n                                name: 'tag_tags',\n                                sortable: false,\n                                stype: 'string',\n                                tableable: false\n                            });\n                        }\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=100000&sort=name%20asc&wt=json&rand=' + Math.random();\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=100000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=') + '&rand=' + Math.random();\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(new RegExp(oldNeedle, 'g'), newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', [\"$http\", \"sugar\", function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels,display_override';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            var Translator = (function () {\n                /* @ngInject */\n                Translator.$inject = [\"config\", \"$http\", \"$q\"];\n                function Translator(config, $http, $q) {\n                    var _this = this;\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                    this.removePrefixHash = {};\n                    var removePrefixList = ['fs_', 'ft_', 'fh_', 'fi_', 'fl_', 'fd_', 'ff_', 'fu_', 'fp_', 'fy_', 'fm_', 'fb_', 'tag_', 'meta_', 'fss_', 'grp_'];\n                    removePrefixList.forEach(function (item) {\n                        _this.removePrefixHash[item] = true;\n                        var c = item.substring(1, 2);\n                        var key = item.replace('_', c + '_');\n                        _this.removePrefixHash[key] = true;\n                    });\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var idx = field.indexOf('_');\n                    if (idx > -1) {\n                        var prefix = field.substring(0, idx + 1);\n                        if (this.removePrefixHash[prefix]) {\n                            field = field.replace(prefix, '');\n                        }\n                    }\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', [\"config\", \"$http\", \"$q\", function (config, $http, $q) { return new translate.Translator(config, $http, $q); }])\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', [\"config\", \"$http\", function (config, $http) { return util.Sugar.getInstance(config, $http); }]);\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"/source/"}