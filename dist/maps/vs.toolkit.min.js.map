{"version":3,"sources":["/source/vs.toolkit.min.js","vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","$inject","RunBlock","$log","debug","angular","module","config","run","constant","catalog","factory","$http","$q","_fetch","get","uri","then","res","data","servers","error","console","log","_loadRemoteLocations","params","catalogs","promises","forEach","isDefined","url","locations","catalogPromise","withCredentials","response","push","all","root","fetch","loadRemoteLocations","displayConfig","_getListQueryString","queryString","configUri","Math","random","_getConfigQueryString","id","_getDisplayConfigList","_getDisplayConfig","_deleteDisplayConfig","_saveDisplayConfig","template","post","getDisplayConfigs","getDisplayConfig","deleteDisplayConfig","saveDisplayConfig","util","Sugar","this","isString","val","String","getInstance","prototype","toMap","key","array","map","value","toStringMap","pluck","name","fn","fl","isUndefined","postForm","service","method","headers","Content-Type","parseQueryString","s","pairs","slice","split","result","pair","decodeURIComponent","JSON","parse","stringify","postJson","request","api","action","fields","fields_1","FieldsResource","sugar","_this","getFieldsParams","ensureTagsFieldExist","docs","found","i","length","category","disp_en","displayable","filterable","sortable","stype","tableable","fetchHydrationStats","query","field","indexOf","getStatsParams","statsFields","facet_counts","facet_fields","total","numFound","applyHydration","join","statsField","count","getCount","hydration","refName","filters","filter","hayStack","oldNeedle","newNeedle","replace","RegExp","translate","Translator","removePrefixHash","removePrefixList","item","c","substring","load","resourceUrl","when","translateField","idx","prefix","translated","FIELD","classify","str","txt","charAt","toUpperCase","substr","toLowerCase","savedSearch","_doSave","_getQueryString","rows","_execute","jsonp","getSavedSearches","saveSearch","deleteSearch","wipe","restore","order","beforeId","afterId","fetchLabels","Date","getTime","resp","labels"],"mappings":"AAAA,GAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIC,GAAU,WAEV,QAASA,GAAOC,GAEZA,EAAaC,cAAa,GAG9B,MCLAF,GAAOG,SAAW,gBDKXH,IAEXD,GAAMC,OAASA,GAChBD,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIK,GAAY,WAEZ,QAASA,GAASC,GACdA,EAAKC,MAAM,gBAEf,MCFAF,GAASD,SAAW,QDEbC,IAEXL,GAAMK,SAAWA,GAClBL,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAKV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACAQ,SAAQC,OAAO,eACVC,OAAOV,EAAMC,QACbU,IAAIX,EAAMK,UACVO,SAAS,SAAUF,SACzBV,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIa,IACJ,SAAWA,GACP,YACAL,SAAQC,OAAO,wBAChBI,EAAUb,EAAMa,UAAYb,EAAMa,cACtCb,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,QAEVS,QAAQC,OAAO,oBAEXK,QAAQ,mBAAA,QAAA,KAAmB,SAAUC,EAAOC,GAC5C,YAGA,SAASC,KACL,MAAOF,GAAMG,IAAIC,GAAKC,KAAK,SAAUC,GACjC,MAAOA,GAAIC,KAAKC,SACjB,SAAUC,GAET,MADAC,SAAQC,IAAIF,GACLA,IAGf,QAASG,GAAqBC,GAC1B,MAAOX,KAASG,KAAK,SAAUS,GAC3B,GAAIC,KAUJ,OATAD,GAASE,QAAQ,SAAUlB,GACvB,GAAIL,QAAQwB,UAAUnB,EAAQoB,KAAM,CAChC,GAAIA,GAAMpB,EAAQoB,IAAMC,EACpBC,EAAiBpB,EAAMG,IAAIe,GAAOG,iBAAiB,IAAShB,KAAK,SAAUiB,GAC3E,MAAOA,IAEXP,GAASQ,KAAKH,MAGfnB,EAAGuB,IAAIT,GAAUV,KAAK,SAAUC,GACnC,MAAOA,IACR,SAAUG,GACT,MAAOA,OAzBnB,GAAIL,GAAMT,OAAO8B,KAAO,wCACpBN,EAAY,mCA4BhB,QACIO,MAAOxB,EACPyB,oBAAqBf,KAI7B,IAAI5B,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAI2C,IACJ,SAAWA,GACP,YACAnC,SAAQC,OAAO,8BAChBkC,EAAgB3C,EAAM2C,gBAAkB3C,EAAM2C,oBAClD3C,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,QAEVS,QAAQC,OAAO,0BAEXK,QAAQ,yBAAA,QAAyB,SAAUC,GAC3C,YAEA,SAAS6B,KACL,GAAIC,GAAcC,EAAY,MAE9B,OADAD,IAAe,SAAWE,KAAKC,SAGnC,QAASC,GAAsBC,GAC3B,GAAIL,GAAcC,EAAYI,CAE9B,OADAL,IAAe,SAAWE,KAAKC,SAGnC,QAASG,KACL,MAAOpC,GAAMG,IAAI0B,KAAuBxB,KAAK,SAAUE,GACnD,MAAOA,IACR,SAAUE,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,QAAS4B,GAAkBF,GACvB,MAAOnC,GAAMG,IAAI+B,EAAsBC,IAAK9B,KAAK,SAAUE,GACvD,MAAOA,IACR,SAAUE,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,QAAS6B,GAAqBH,GAC1B,MAAOnC,GAAAA,UAAakC,EAAsBC,IAAK9B,KAAK,SAAUE,GAC1D,MAAOA,IACR,SAAUE,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,QAAS8B,GAAmBC,GACxB,MAAOxC,GAAMyC,KAAKV,EAAWS,GAAUnC,KAAK,SAAUE,GAClD,MAAOA,IACR,SAAUE,GAGT,MADAC,SAAQC,IAAIF,GACLA,IA5Cf,GAAIsB,GAAYpC,OAAO8B,KAAO,0BA+C9B,QACIiB,kBAAmB,WACf,MAAON,MAEXO,iBAAkB,SAAUR,GACxB,MAAOE,GAAkBF,IAE7BS,oBAAqB,SAAUT,GAC3B,MAAOG,GAAqBH,IAEhCU,kBAAmB,SAAUL,GACzB,MAAOD,GAAmBC,OAKtC,IAAIxD,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAI6D,IACJ,SAAWA,GACP,YACA,IAAIC,GAAS,WACT,QAASA,GAAMpD,EAAQK,GACnBgD,KAAKrD,OAASA,EACdqD,KAAKhD,MAAQA,EA6DjB,MA3DA+C,GAAME,SAAW,SAAUC,GACvB,MAAuB,gBAARA,IAAoBA,YAAeC,SAEtDJ,EAAMK,YAAc,SAAUzD,EAAQK,GAClC,MAAO,IAAI+C,GAAMpD,EAAQK,IAE7B+C,EAAMM,UAAUC,MAAQ,SAAUC,EAAKC,GACnC,GAAIC,KAIJ,OAHAD,GAAMxC,QAAQ,SAAU0C,GACpBD,EAAIC,EAAMH,IAAQG,IAEfD,GAEXV,EAAMM,UAAUM,YAAc,SAAUH,GACpC,GAAIC,KAIJ,OAHAD,GAAMxC,QAAQ,SAAU0C,GACpBD,EAAIC,GAASA,IAEVD,GAEXV,EAAMM,UAAUO,MAAQ,SAAUJ,EAAOK,EAAMC,GAC3C,GAAIC,KASJ,OARAP,GAAMxC,QAAQ,SAAU0C,GAChBI,GAAMA,EAAGJ,GACTK,EAAGxC,KAAKmC,EAAMG,IAETpE,QAAQuE,YAAYF,IACzBC,EAAGxC,KAAKmC,EAAMG,MAGfE,GAEXhB,EAAMM,UAAUY,SAAW,SAAU/C,EAAKX,GACtC,GAAI2D,GAAUlB,KAAKrD,OAAO8B,KAAOP,CACjC,OAAO8B,MAAKhD,OACRmE,OAAQ,OACRjD,IAAKgD,EACL3D,KAAMA,EACNc,iBAAiB,EACjB+C,SAAWC,eAAgB,wCAGnCtB,EAAMM,UAAUiB,iBAAmB,SAAUxC,GACzC,GACiByC,GADbC,EAAQ1C,EAAY2C,MAAM,GAAGC,MAAM,KACnCC,IAKJ,OAJAH,GAAMxD,QAAQ,SAAU4D,GACpBL,EAAIK,EAAKF,MAAM,KACfC,EAAOJ,EAAE,IAAMM,mBAAmBN,EAAE,IAAM,MAEvCO,KAAKC,MAAMD,KAAKE,UAAUL,KAErC5B,EAAMM,UAAU4B,SAAW,SAAUC,EAASC,EAAKC,GAC/C,MAAOpC,MAAKhD,OACRmE,OAAQ,OACRjD,IAAKvB,OAAO8B,KAAO,YAAc0D,EAAM,IAAMC,EAAS,QACtD7E,KAAM2E,EACNd,SAAWC,eAAgB,uBAG5BtB,IAEXD,GAAKC,MAAQA,GACdD,EAAO7D,EAAM6D,OAAS7D,EAAM6D,WAChC7D,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAIV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIoG,IACJ,SAAWC,GACP,YACA,IAAIC,GAAkB,WAElB,QAASA,GAAeC,GACpB,GAAIC,GAAQzC,IACZA,MAAKwC,MAAQA,EACbxC,KAAKtB,MAAQ,SAAU2D,GACnB,GAAItB,GAAMsB,GAAU,qFACpB,OAAOG,GAAMvB,SAAS,2BAA6BjC,KAAKC,SAAUwD,EAAMC,gBAAgB3B,IAAK1D,KAAK,SAAUC,GAExG,MADAmF,GAAME,qBAAqBrF,EAAIC,KAAKe,SAASsE,MACtCtF,EAAIC,KAAKe,SAASsE,QAGjC5C,KAAK2C,qBAAuB,SAAUN,GAElC,IAAK,GADDQ,IAAQ,EACHC,EAAIT,EAAOU,OAAS,EAAGD,GAAK,EAAGA,IACpC,GAAuB,aAAnBT,EAAOS,GAAGjC,KAAqB,CAC/BgC,GAAQ,CACR,OAGHA,GACDR,EAAO9D,MACHyE,SAAU,OACVC,QAAS,OACTC,aAAa,EACbN,KAAM,EACNO,YAAY,EACZtC,KAAM,WACNuC,UAAU,EACVC,MAAO,SACPC,WAAW,KAIvBtD,KAAKuD,oBAAsB,SAAUC,GACjC,MAAOf,GAAM/D,QAAQrB,KAAK,SAAUgF,GAChC,GAAItB,GAAKyB,EAAM5B,MAAMyB,EAAQ,OAAQ,SAAUoB,GAAS,MAAmC,KAA5BA,EAAM5C,KAAK6C,QAAQ,MAAcD,EAAMb,KAAO,GAC7G,OAAOJ,GAAMvB,SAAS,kBAAoBuC,EAAOf,EAAMkB,eAAe5C,IAAK1D,KAAK,SAAUC,GACtF,GAAIsG,GAActG,EAAIC,KAAKsG,aAAaC,aACpCC,EAAQzG,EAAIC,KAAKe,SAAS0F,QAE9B,OADAvB,GAAMwB,eAAeL,EAAavB,EAAQ0B,GACnC1B,OA+BvB,MCpEAE,GAAelG,SAAW,SD0C1BkG,EAAelC,UAAUqC,gBAAkB,SAAU3B,GACjD,MAAO,YAAcA,EAAK,6CAA+C/B,KAAKC,UAElFsD,EAAelC,UAAUsD,eAAiB,SAAU5C,GAChD,MAAO,+EAAiFA,EAAGmD,KAAK,iBAAmB,SAAWlF,KAAKC,UAEvIsD,EAAelC,UAAU4D,eAAiB,SAAUL,EAAavB,EAAQ0B,GAErE,IAAK,GADDI,GAAYC,EACPtB,EAAI,EAAGA,EAAIT,EAAOU,OAAQD,IAC/BqB,EAAaP,EAAYvB,EAAOS,GAAGjC,MAC/BsD,GAAcA,EAAWpB,OAAS,IAClCV,EAAOS,GAAG3D,GAAKkD,EAAOS,GAAGjC,KACzBuD,EAAQpE,KAAKqE,SAASF,GACtB9B,EAAOS,GAAGwB,UAAYF,EAAQL,EAAQ,IAG9C,OAAOjB,IAEXP,EAAelC,UAAUgE,SAAW,SAAUZ,GAE1C,IAAK,GADDW,GAAQ,EACHtB,EAAI,EAAGA,EAAIW,EAAMV,OAAQD,GAAK,EACnCsB,GAASX,EAAMX,EAEnB,OAAOsB,IAEX7B,EAAegC,QAAU,iBAClBhC,IAEXD,GAASC,eAAiBA,GAC3BF,EAASpG,EAAMoG,SAAWpG,EAAMoG,aACpCpG,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAIV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIoG,IACJ,SAAWA,GACP,YACA5F,SAAQC,OAAO,mBAAoB,kBAC9BwE,QAAQmB,EAAOE,eAAegC,QAASlC,EAAOE,iBACpDF,EAASpG,EAAMoG,SAAWpG,EAAMoG,aACpCpG,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIuI,IACJ,SAAWA,GACP,YACA/H,SAAQC,OAAO,uBACV+H,OAAO,gBAAiB,WACzB,MAAO,UAAUC,EAAUC,EAAWC,GAClC,MAAOF,GAASG,QAAQ,GAAIC,QAAOH,EAAW,KAAMC,OAG7DJ,EAAUvI,EAAMuI,UAAYvI,EAAMuI,cACtCvI,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAI8I,IACJ,SAAWA,GACP,YACA,IAAIC,GAAc,WAEd,QAASA,GAAWrI,EAAQK,EAAOC,GAC/B,GAAIwF,GAAQzC,IACZA,MAAKrD,OAASA,EACdqD,KAAKhD,MAAQA,EACbgD,KAAK/C,GAAKA,EACV+C,KAAKqC,OAAS,KACdrC,KAAKiF,mBACL,IAAIC,IAAoB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,QAAS,OAAQ,QACrIA,GAAiBlH,QAAQ,SAAUmH,GAC/B1C,EAAMwC,iBAAiBE,IAAQ,CAC/B,IAAIC,GAAID,EAAKE,UAAU,EAAG,GACtB9E,EAAM4E,EAAKN,QAAQ,IAAKO,EAAI,IAChC3C,GAAMwC,iBAAiB1E,IAAO,IAsCtC,MC/CAyE,GAAW3I,SAAW,SAAU,QAAS,MDYzC2I,EAAW3E,UAAUiF,KAAO,WACxB,GAAI7C,GAAQzC,KACRuF,EAAcvF,KAAKrD,OAAO8B,KAAO,oCACrC,OAAKuB,MAAKqC,OAOCrC,KAAK/C,GAAGuI,OANRxF,KAAKhD,MAAMG,IAAIoI,GAAalI,KAAK,SAAUC,GAE9C,MADAmF,GAAMJ,OAAS/E,EAAIC,KACZD,EAAIC,QAOvByH,EAAW3E,UAAUoF,eAAiB,SAAUhC,GAC5C,GAAIiC,GAAMjC,EAAMC,QAAQ,IACxB,IAAIgC,EAAM,GAAI,CACV,GAAIC,GAASlC,EAAM4B,UAAU,EAAGK,EAAM,EAClC1F,MAAKiF,iBAAiBU,KACtBlC,EAAQA,EAAMoB,QAAQc,EAAQ,KAGtC,GAAIC,GAAa5F,KAAKqC,OAAOwD,MAAMpC,EACnC,OAAIhH,SAAQwB,UAAU2H,GACXA,EAGA5F,KAAK8F,SAASrC,IAG7BuB,EAAW3E,UAAUyF,SAAW,SAAUC,GAEtC,MADAA,GAAMA,EAAIlB,QAAQ,KAAM,KACjBkB,EAAIlB,QAAQ,SAAU,SAAUmB,GACnC,MAAOA,GAAIC,OAAO,GAAGC,cAAgBF,EAAIG,OAAO,GAAGC,iBAGpDpB,IAEXD,GAAUC,WAAaA,GACxBD,EAAY9I,EAAM8I,YAAc9I,EAAM8I,gBAC1C9I,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAGV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAI8I,IACJ,SAAWA,GACP,YACAtI,SAAQC,OAAO,yBACVK,QAAQ,cAAA,SAAA,QAAA,KAAc,SAAUJ,EAAQK,EAAOC,GAAM,MAAO,IAAI8H,GAAUC,WAAWrI,EAAQK,EAAOC,MACpGJ,SAAS,SAAUF,SACzBoI,EAAY9I,EAAM8I,YAAc9I,EAAM8I,gBAC1C9I,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIoK,IACJ,SAAWA,GACP,YACA5J,SAAQC,OAAO,wBAAyB,mBACzC2J,EAAcpK,EAAMoK,cAAgBpK,EAAMoK,kBAC9CpK,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,QAEVS,QAAQC,OAAO,wBAEXK,QAAQ,uBAAA,QAAA,QAAuB,SAAUC,EAAOwF,GAChD,YACA,SAAS8D,GAAQD,GACb,MAAO7D,GAAMP,SAASoE,EAAa,UAAW,WAElD,QAASE,GAAgBpH,GACrB,GAAIqH,GAAO,IACP1H,EAAcnC,OAAO8B,KAAO,sBAOhC,OANAK,IAAe,QAAU0H,EAAO,SAAWxH,KAAKC,SAChDH,GAAe,sJACfA,GAAe,kCACXrC,QAAQwB,UAAUkB,KAClBL,GAAe,UAAYK,GAExBL,EAEX,QAAS2H,GAAStH,GACd,MAAOnC,GAAM0J,MAAMH,EAAgBpH,IAAK9B,KAAK,SAAUE,GACnD,MAAOA,GAAKA,KAAKe,SAASsE,MAC3B,SAAUnF,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,OACIkJ,iBAAkB,WACd,MAAOF,MAEX/H,MAAO,SAAUS,GACb,MAAOsH,GAAStH,GAAI9B,KAAK,SAAUuF,GAC/B,MAAOA,GAAK,MAGpBgE,WAAY,SAAUP,EAAaxI,GAG/B,MAAOyI,GAAQD,IAEnBQ,aAAc,SAAU1H,GACpB,MAAOnC,GAAAA,UAAaL,OAAO8B,KAAO,4BAA8BU,GAAI9B,KAAK,eAM7EyJ,KAAM,WACF,MAAO9J,GAAAA,UAAaL,OAAO8B,KAAO,kCAEtCsI,QAAS,WACL,MAAOvE,GAAMvB,SAAS,2BAA4B,KAEtD+F,MAAO,SAAU7H,EAAI8H,EAAUC,GAC3B,GAAI3J,GAAO,EACM,QAAb0J,IACA1J,GAAQ,UAAY0J,GAEX,KAAT1J,IACAA,GAAQ,KAEI,OAAZ2J,IACA3J,GAAQ,SAAW2J,IAI3BC,YAAa,WACT,GAAIjJ,GAAMvB,OAAO8B,KAAO,uEAAwE,GAAI2I,OAAOC,SAC3G,OAAOrK,GAAMG,IAAIe,GAAKb,KAAK,SAAUiK,GACjC,MAAOA,GAAK/J,KAAKsG,aAAaC,aAAayD,QAC5C,WACC,eAOhB,IAAIvL,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAI6D,IACJ,SAAWA,GACP,YACArD,SAAQC,OAAO,oBACVK,QAAQ,SAAA,SAAA,QAAS,SAAUJ,EAAQK,GAAS,MAAO8C,GAAKC,MAAMK,YAAYzD,EAAQK,OACxF8C,EAAO7D,EAAM6D,OAAS7D,EAAM6D,WAChC7D,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var catalog;\n        (function (catalog) {\n            'use strict';\n            angular.module('vs.tools.catalog', []);\n        })(catalog = tools.catalog || (tools.catalog = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.catalog').\n    /* @ngInject */\n    factory('catalogResource', function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/index/config/federation.json';\n    var locations = 'api/rest/i18n/field/location.json';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data.servers;\n        }, function (error) {\n            console.log(error);\n            return error;\n        });\n    }\n    function _loadRemoteLocations(params) {\n        return _fetch().then(function (catalogs) {\n            var promises = [];\n            catalogs.forEach(function (catalog) {\n                if (angular.isDefined(catalog.url)) {\n                    var url = catalog.url + locations;\n                    var catalogPromise = $http.get(url, { withCredentials: false }).then(function (response) {\n                        return response;\n                    });\n                    promises.push(catalogPromise);\n                }\n            });\n            return $q.all(promises).then(function (res) {\n                return res;\n            }, function (error) {\n                return error; // failure means the remote catalogs are offline, allow to continue, the search should show an error\n            });\n        });\n    }\n    return {\n        fetch: _fetch,\n        loadRemoteLocations: _loadRemoteLocations\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,stype,category,docs,disp_en,sortable,filterable,tableable,displayable,editable');\n                        return sugar.postForm('solr/fields/select?rand=' + Math.random(), _this.getFieldsParams(fl)).then(function (res) {\n                            _this.ensureTagsFieldExist(res.data.response.docs);\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.ensureTagsFieldExist = function (fields) {\n                        var found = false;\n                        for (var i = fields.length - 1; i >= 0; i--) {\n                            if (fields[i].name === 'tag_tags') {\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            fields.push({\n                                category: 'TEXT',\n                                disp_en: 'Tags',\n                                displayable: true,\n                                docs: 0,\n                                filterable: true,\n                                name: 'tag_tags',\n                                sortable: false,\n                                stype: 'string',\n                                tableable: false\n                            });\n                        }\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=100000&sort=name%20asc&wt=json&rand=' + Math.random();\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=100000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=') + '&rand=' + Math.random();\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(new RegExp(oldNeedle, 'g'), newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    var _this = this;\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                    this.removePrefixHash = {};\n                    var removePrefixList = ['fs_', 'ft_', 'fh_', 'fi_', 'fl_', 'fd_', 'ff_', 'fu_', 'fp_', 'fy_', 'fm_', 'fb_', 'tag_', 'meta_', 'fss_', 'lgrp_'];\n                    removePrefixList.forEach(function (item) {\n                        _this.removePrefixHash[item] = true;\n                        var c = item.substring(1, 2);\n                        var key = item.replace('_', c + '_');\n                        _this.removePrefixHash[key] = true;\n                    });\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var idx = field.indexOf('_');\n                    if (idx > -1) {\n                        var prefix = field.substring(0, idx + 1);\n                        if (this.removePrefixHash[prefix]) {\n                            field = field.replace(prefix, '');\n                        }\n                    }\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); })\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels,display_override';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n});\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,","var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            Config.$inject = [\"$logProvider\"];\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            RunBlock.$inject = [\"$log\"];\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var catalog;\n        (function (catalog) {\n            'use strict';\n            angular.module('vs.tools.catalog', []);\n        })(catalog = tools.catalog || (tools.catalog = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.catalog').\n    /* @ngInject */\n    factory('catalogResource', [\"$http\", \"$q\", function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/index/config/federation.json';\n    var locations = 'api/rest/i18n/field/location.json';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data.servers;\n        }, function (error) {\n            console.log(error);\n            return error;\n        });\n    }\n    function _loadRemoteLocations(params) {\n        return _fetch().then(function (catalogs) {\n            var promises = [];\n            catalogs.forEach(function (catalog) {\n                if (angular.isDefined(catalog.url)) {\n                    var url = catalog.url + locations;\n                    var catalogPromise = $http.get(url, { withCredentials: false }).then(function (response) {\n                        return response;\n                    });\n                    promises.push(catalogPromise);\n                }\n            });\n            return $q.all(promises).then(function (res) {\n                return res;\n            }, function (error) {\n                return error; // failure means the remote catalogs are offline, allow to continue, the search should show an error\n            });\n        });\n    }\n    return {\n        fetch: _fetch,\n        loadRemoteLocations: _loadRemoteLocations\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', [\"$http\", function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                FieldsResource.$inject = [\"sugar\"];\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,stype,category,docs,disp_en,sortable,filterable,tableable,displayable,editable');\n                        return sugar.postForm('solr/fields/select?rand=' + Math.random(), _this.getFieldsParams(fl)).then(function (res) {\n                            _this.ensureTagsFieldExist(res.data.response.docs);\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.ensureTagsFieldExist = function (fields) {\n                        var found = false;\n                        for (var i = fields.length - 1; i >= 0; i--) {\n                            if (fields[i].name === 'tag_tags') {\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            fields.push({\n                                category: 'TEXT',\n                                disp_en: 'Tags',\n                                displayable: true,\n                                docs: 0,\n                                filterable: true,\n                                name: 'tag_tags',\n                                sortable: false,\n                                stype: 'string',\n                                tableable: false\n                            });\n                        }\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=100000&sort=name%20asc&wt=json&rand=' + Math.random();\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=100000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=') + '&rand=' + Math.random();\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(new RegExp(oldNeedle, 'g'), newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            var Translator = (function () {\n                /* @ngInject */\n                Translator.$inject = [\"config\", \"$http\", \"$q\"];\n                function Translator(config, $http, $q) {\n                    var _this = this;\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                    this.removePrefixHash = {};\n                    var removePrefixList = ['fs_', 'ft_', 'fh_', 'fi_', 'fl_', 'fd_', 'ff_', 'fu_', 'fp_', 'fy_', 'fm_', 'fb_', 'tag_', 'meta_', 'fss_', 'lgrp_'];\n                    removePrefixList.forEach(function (item) {\n                        _this.removePrefixHash[item] = true;\n                        var c = item.substring(1, 2);\n                        var key = item.replace('_', c + '_');\n                        _this.removePrefixHash[key] = true;\n                    });\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var idx = field.indexOf('_');\n                    if (idx > -1) {\n                        var prefix = field.substring(0, idx + 1);\n                        if (this.removePrefixHash[prefix]) {\n                            field = field.replace(prefix, '');\n                        }\n                    }\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', [\"config\", \"$http\", \"$q\", function (config, $http, $q) { return new translate.Translator(config, $http, $q); }])\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', [\"$http\", \"sugar\", function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels,display_override';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n}]);\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', [\"config\", \"$http\", function (config, $http) { return util.Sugar.getInstance(config, $http); }]);\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"/source/"}